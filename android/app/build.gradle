plugins {
    id "com.android.application"
    id "kotlin-android" // Ensure this is included
    // The Flutter Gradle Plugin must be applied after the Android and Kotlin Gradle plugins.
    id "dev.flutter.flutter-gradle-plugin"
}
def localProperties = new Properties()
def localPropertiesFile = rootProject.file("local.properties")
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader("UTF-8") { reader ->
        localProperties.load(reader)
    }
}
def flutterVersionCode = localProperties.getProperty("flutter.versionCode")
if (flutterVersionCode == null) {
    flutterVersionCode = "1"
}
def flutterVersionName = localProperties.getProperty("flutter.versionName")
if (flutterVersionName == null) {
    flutterVersionName = "1.0"
}
android {
    namespace = "com.example.organisations"
    compileSdk = flutter.compileSdkVersion // Use the latest available version, such as 33
    ndkVersion = flutter.ndkVersion
    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }
    kotlinOptions { // Ensure compatibility with the desired version of Kotlin
        jvmTarget = '1.8'
    }
    defaultConfig {
        applicationId = "com.example.organisations"
        minSdk = flutter.minSdkVersion // Ensure it's compatible, like 21 or 23
        targetSdk = flutter.targetSdkVersion // Make sure this is set to a recent version, e.g., 33
        versionCode = flutterVersionCode.toInteger()
        versionName = flutterVersionName
    }
    buildTypes {
        release {
            signingConfig = signingConfigs.debug
        }
    }
}
flutter {
    source = "../.."
}
dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version" // Ensure this line is included
    // Add other dependencies as needed
}





tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions {
        freeCompilerArgs += ["-Xskip-metadata-version-check"]
    }
}




